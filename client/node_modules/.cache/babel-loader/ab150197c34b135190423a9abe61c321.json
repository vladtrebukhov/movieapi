{"ast":null,"code":"const express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst app = express();\nconst port = process.env.PORT || 5000;\nconst endpointUrl = 'https://jsonplaceholder.typicode.com/posts';\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.listen(port, () => console.log(`Listening on port ${port}`));\napp.get('/', async (req, res) => {\n  const fetch_response = await fetch(endpointUrl);\n  const body = await fetch_response.json();\n  if (fetch_response.status !== 200) throw Error(body.message);\n  res.json(body);\n});","map":{"version":3,"sources":["C:/Users/Vlad/IdeaProjects/thinq/movieapp/client/src/server.js"],"names":["express","require","bodyParser","app","port","process","env","PORT","endpointUrl","use","json","urlencoded","extended","listen","console","log","get","req","res","fetch_response","fetch","body","status","Error","message"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,GAAG,GAAGH,OAAO,EAAnB;AACA,MAAMI,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,MAAMC,WAAW,GAAG,4CAApB;AAEAL,GAAG,CAACM,GAAJ,CAAQP,UAAU,CAACQ,IAAX,EAAR;AACAP,GAAG,CAACM,GAAJ,CAAQP,UAAU,CAACS,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAT,GAAG,CAACU,MAAJ,CAAWT,IAAX,EAAiB,MAAMU,OAAO,CAACC,GAAR,CAAa,qBAAoBX,IAAK,EAAtC,CAAvB;AAEAD,GAAG,CAACa,GAAJ,CAAQ,GAAR,EAAa,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7B,QAAMC,cAAc,GAAG,MAAMC,KAAK,CAACZ,WAAD,CAAlC;AACA,QAAMa,IAAI,GAAG,MAAMF,cAAc,CAACT,IAAf,EAAnB;AAEA,MAAIS,cAAc,CAACG,MAAf,KAA0B,GAA9B,EAAmC,MAAMC,KAAK,CAACF,IAAI,CAACG,OAAN,CAAX;AAEnCN,EAAAA,GAAG,CAACR,IAAJ,CAASW,IAAT;AACH,CAPD","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst app = express();\r\nconst port = process.env.PORT || 5000;\r\nconst endpointUrl = 'https://jsonplaceholder.typicode.com/posts';\r\n\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.listen(port, () => console.log(`Listening on port ${port}`));\r\n\r\napp.get('/', async (req, res) => {\r\n    const fetch_response = await fetch(endpointUrl);\r\n    const body = await fetch_response.json();\r\n\r\n    if (fetch_response.status !== 200) throw Error(body.message);\r\n\r\n    res.json(body);\r\n});\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}